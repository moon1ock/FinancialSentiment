{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _immutable = _interopRequireDefault(require(\"immutable\"));\n\nvar _event = _interopRequireDefault(require(\"./event\"));\n\nvar _util = _interopRequireDefault(require(\"./base/util\"));\n/*\n *  Copyright (c) 2016-2017, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/**\n * A `TimeRangeEvent` uses a `TimeRange` to specify the range over\n * which the event occurs and maps that to a data object representing\n * some measurements or metrics during that time range.\n *\n * You supply the timerange as a `TimeRange` object.\n *\n * The data is also specified during construction and maybe either:\n *  1) a Javascript object or simple type\n *  2) an Immutable.Map.\n *  3) Simple measurement\n *\n * If an Javascript object is provided it will be stored internally as an\n * Immutable Map. If the data provided is some other simple type (such as an\n * integer) then it will be equivalent to supplying an object of {value: data}.\n * Data may also be undefined.\n *\n * ```\n * const e = new TimeRangeEvent(timerange, data);\n * ```\n *\n * To get the data out of an TimeRangeEvent instance use `data()`.\n * It will return an Immutable.Map. Alternatively you can call `toJSON()`\n * to return a Javascript object representation of the data, while\n * `toString()` will serialize the entire event to a string.\n *\n * **Example:**\n *\n * Given some source of data that looks like this:\n *\n * ```json\n * const event = {\n *     \"start_time\": \"2015-04-22T03:30:00Z\",\n *     \"end_time\": \"2015-04-22T13:00:00Z\",\n *     \"description\": \"At 13:33 pacific circuit 06519 went down.\",\n *     \"title\": \"STAR-CR5 - Outage\",\n *     \"completed\": true,\n *     \"external_ticket\": \"\",\n *     \"esnet_ticket\": \"ESNET-20150421-013\",\n *     \"organization\": \"Internet2 / Level 3\",\n *     \"type\": \"U\"\n * }\n * ```\n *\n * We first extract the begin and end times to build a TimeRange:\n *\n * ```js\n * let b = new Date(event.start_time);\n * let e = new Date(event.end_time);\n * let timerange = new TimeRange(b, e);\n * ```\n *\n * Then we combine the TimeRange and the event itself to create the Event.\n *\n * ```js\n * let outageEvent = new TimeRangeEvent(timerange, sampleEvent);\n * ```\n *\n * Once we have an event we can get access the time range with:\n *\n * ```js\n * outageEvent.begin().getTime()   // 1429673400000\n * outageEvent.end().getTime())    // 1429707600000\n * outageEvent.humanizeDuration()) // \"10 hours\"\n * ```\n *\n * And we can access the data like so:\n *\n * ```js\n * outageEvent.get(\"title\")  // \"STAR-CR5 - Outage\"\n * ```\n */\n\n\nclass TimeRangeEvent extends _event.default {\n  /**\n   * The creation of an TimeRangeEvent is done by combining two parts:\n   * the timerange and the data.\n   *\n   * To construct you specify a TimeRange, along with the data.\n   *\n   * To specify the data you can supply either:\n   *     - a Javascript object containing key values pairs\n   *     - an Immutable.Map, or\n   *     - a simple type such as an integer. In the case of the simple type\n   *       this is a shorthand for supplying {\"value\": v}.\n   */\n  constructor(arg1, arg2) {\n    super();\n\n    if (arg1 instanceof TimeRangeEvent) {\n      var other = arg1;\n      this._d = other._d;\n      return;\n    } else if (arg1 instanceof _immutable.default.Map) {\n      this._d = arg1;\n      return;\n    }\n\n    var range = _util.default.timeRangeFromArg(arg1);\n\n    var data = _util.default.dataFromArg(arg2);\n\n    this._d = new _immutable.default.Map({\n      range,\n      data\n    });\n  }\n  /**\n   * Returns the timerange as a string\n   */\n\n\n  key() {\n    return \"\".concat(+this.timerange().begin(), \",\").concat(+this.timerange().end());\n  }\n  /**\n   * Returns the TimeRangeEvent as a JSON object, converting all\n   * Immutable structures in the process.\n   */\n\n\n  toJSON() {\n    return {\n      timerange: this.timerange().toJSON(),\n      data: this.data().toJSON()\n    };\n  }\n  /**\n   * Returns a flat array starting with the timestamp, followed by the values.\n   */\n\n\n  toPoint(columns) {\n    var values = [];\n    columns.forEach(c => {\n      var v = this.data().get(c);\n      values.push(v === \"undefined\" ? null : v);\n    });\n    return [this.timerange().toJSON(), ...values];\n  }\n  /**\n   * The timerange of this data as a `TimeRange` object\n   * @return {TimeRange} TimeRange of this data.\n   */\n\n\n  timerange() {\n    return this._d.get(\"range\");\n  }\n  /**\n   * The TimeRange of this event, in UTC, as a string.\n   * @return {string} TimeRange of this data.\n   */\n\n\n  timerangeAsUTCString() {\n    return this.timerange().toUTCString();\n  }\n  /**\n   * The TimeRange of this event, in Local time, as a string.\n   * @return {string} TimeRange of this data.\n   */\n\n\n  timerangeAsLocalString() {\n    return this.timerange().toLocalString();\n  }\n  /**\n   * The begin time of this Event\n   * @return {Data} Begin time\n   */\n\n\n  begin() {\n    return this.timerange().begin();\n  }\n  /**\n   * The end time of this Event\n   * @return {Data} End time\n   */\n\n\n  end() {\n    return this.timerange().end();\n  }\n  /**\n   * Alias for the begin() time.\n   * @return {Data} Time representing this Event\n   */\n\n\n  timestamp() {\n    return this.begin();\n  }\n  /**\n   * A human friendly version of the duration of this event\n   */\n\n\n  humanizeDuration() {\n    return this.timerange().humanizeDuration();\n  }\n\n}\n\nvar _default = TimeRangeEvent;\nexports.default = _default;","map":{"version":3,"sources":["/Users/nicholasraffone/Documents/swefall2021/finalproj/FinancialSentiment/fin_sentiment_front/node_modules/pondjs/lib/lib/timerangeevent.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_underscore","_immutable","_event","_util","TimeRangeEvent","constructor","arg1","arg2","other","_d","Map","range","timeRangeFromArg","data","dataFromArg","key","concat","timerange","begin","end","toJSON","toPoint","columns","values","forEach","c","v","get","push","timerangeAsUTCString","toUTCString","timerangeAsLocalString","toLocalString","timestamp","humanizeDuration","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,WAAW,GAAGP,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAxC;;AAEA,IAAIO,UAAU,GAAGR,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAvC;;AAEA,IAAIQ,MAAM,GAAGT,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAAnC;;AAEA,IAAIS,KAAK,GAAGV,sBAAsB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMU,cAAN,SAA6BF,MAAM,CAACH,OAApC,CAA4C;AAC1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEM,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAa;AACtB;;AAEA,QAAID,IAAI,YAAYF,cAApB,EAAoC;AAClC,UAAII,KAAK,GAAGF,IAAZ;AACA,WAAKG,EAAL,GAAUD,KAAK,CAACC,EAAhB;AACA;AACD,KAJD,MAIO,IAAIH,IAAI,YAAYL,UAAU,CAACF,OAAX,CAAmBW,GAAvC,EAA4C;AACjD,WAAKD,EAAL,GAAUH,IAAV;AACA;AACD;;AAED,QAAIK,KAAK,GAAGR,KAAK,CAACJ,OAAN,CAAca,gBAAd,CAA+BN,IAA/B,CAAZ;;AAEA,QAAIO,IAAI,GAAGV,KAAK,CAACJ,OAAN,CAAce,WAAd,CAA0BP,IAA1B,CAAX;;AAEA,SAAKE,EAAL,GAAU,IAAIR,UAAU,CAACF,OAAX,CAAmBW,GAAvB,CAA2B;AACnCC,MAAAA,KADmC;AAEnCE,MAAAA;AAFmC,KAA3B,CAAV;AAID;AACD;AACF;AACA;;;AAGEE,EAAAA,GAAG,GAAG;AACJ,WAAO,GAAGC,MAAH,CAAU,CAAC,KAAKC,SAAL,GAAiBC,KAAjB,EAAX,EAAqC,GAArC,EAA0CF,MAA1C,CAAiD,CAAC,KAAKC,SAAL,GAAiBE,GAAjB,EAAlD,CAAP;AACD;AACD;AACF;AACA;AACA;;;AAGEC,EAAAA,MAAM,GAAG;AACP,WAAO;AACLH,MAAAA,SAAS,EAAE,KAAKA,SAAL,GAAiBG,MAAjB,EADN;AAELP,MAAAA,IAAI,EAAE,KAAKA,IAAL,GAAYO,MAAZ;AAFD,KAAP;AAID;AACD;AACF;AACA;;;AAGEC,EAAAA,OAAO,CAACC,OAAD,EAAU;AACf,QAAIC,MAAM,GAAG,EAAb;AACAD,IAAAA,OAAO,CAACE,OAAR,CAAgBC,CAAC,IAAI;AACnB,UAAIC,CAAC,GAAG,KAAKb,IAAL,GAAYc,GAAZ,CAAgBF,CAAhB,CAAR;AACAF,MAAAA,MAAM,CAACK,IAAP,CAAYF,CAAC,KAAK,WAAN,GAAoB,IAApB,GAA2BA,CAAvC;AACD,KAHD;AAIA,WAAO,CAAC,KAAKT,SAAL,GAAiBG,MAAjB,EAAD,EAA4B,GAAGG,MAA/B,CAAP;AACD;AACD;AACF;AACA;AACA;;;AAGEN,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKR,EAAL,CAAQkB,GAAR,CAAY,OAAZ,CAAP;AACD;AACD;AACF;AACA;AACA;;;AAGEE,EAAAA,oBAAoB,GAAG;AACrB,WAAO,KAAKZ,SAAL,GAAiBa,WAAjB,EAAP;AACD;AACD;AACF;AACA;AACA;;;AAGEC,EAAAA,sBAAsB,GAAG;AACvB,WAAO,KAAKd,SAAL,GAAiBe,aAAjB,EAAP;AACD;AACD;AACF;AACA;AACA;;;AAGEd,EAAAA,KAAK,GAAG;AACN,WAAO,KAAKD,SAAL,GAAiBC,KAAjB,EAAP;AACD;AACD;AACF;AACA;AACA;;;AAGEC,EAAAA,GAAG,GAAG;AACJ,WAAO,KAAKF,SAAL,GAAiBE,GAAjB,EAAP;AACD;AACD;AACF;AACA;AACA;;;AAGEc,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKf,KAAL,EAAP;AACD;AACD;AACF;AACA;;;AAGEgB,EAAAA,gBAAgB,GAAG;AACjB,WAAO,KAAKjB,SAAL,GAAiBiB,gBAAjB,EAAP;AACD;;AAhIyC;;AAoI5C,IAAIC,QAAQ,GAAG/B,cAAf;AACAP,OAAO,CAACE,OAAR,GAAkBoC,QAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _immutable = _interopRequireDefault(require(\"immutable\"));\n\nvar _event = _interopRequireDefault(require(\"./event\"));\n\nvar _util = _interopRequireDefault(require(\"./base/util\"));\n\n/*\n *  Copyright (c) 2016-2017, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/**\n * A `TimeRangeEvent` uses a `TimeRange` to specify the range over\n * which the event occurs and maps that to a data object representing\n * some measurements or metrics during that time range.\n *\n * You supply the timerange as a `TimeRange` object.\n *\n * The data is also specified during construction and maybe either:\n *  1) a Javascript object or simple type\n *  2) an Immutable.Map.\n *  3) Simple measurement\n *\n * If an Javascript object is provided it will be stored internally as an\n * Immutable Map. If the data provided is some other simple type (such as an\n * integer) then it will be equivalent to supplying an object of {value: data}.\n * Data may also be undefined.\n *\n * ```\n * const e = new TimeRangeEvent(timerange, data);\n * ```\n *\n * To get the data out of an TimeRangeEvent instance use `data()`.\n * It will return an Immutable.Map. Alternatively you can call `toJSON()`\n * to return a Javascript object representation of the data, while\n * `toString()` will serialize the entire event to a string.\n *\n * **Example:**\n *\n * Given some source of data that looks like this:\n *\n * ```json\n * const event = {\n *     \"start_time\": \"2015-04-22T03:30:00Z\",\n *     \"end_time\": \"2015-04-22T13:00:00Z\",\n *     \"description\": \"At 13:33 pacific circuit 06519 went down.\",\n *     \"title\": \"STAR-CR5 - Outage\",\n *     \"completed\": true,\n *     \"external_ticket\": \"\",\n *     \"esnet_ticket\": \"ESNET-20150421-013\",\n *     \"organization\": \"Internet2 / Level 3\",\n *     \"type\": \"U\"\n * }\n * ```\n *\n * We first extract the begin and end times to build a TimeRange:\n *\n * ```js\n * let b = new Date(event.start_time);\n * let e = new Date(event.end_time);\n * let timerange = new TimeRange(b, e);\n * ```\n *\n * Then we combine the TimeRange and the event itself to create the Event.\n *\n * ```js\n * let outageEvent = new TimeRangeEvent(timerange, sampleEvent);\n * ```\n *\n * Once we have an event we can get access the time range with:\n *\n * ```js\n * outageEvent.begin().getTime()   // 1429673400000\n * outageEvent.end().getTime())    // 1429707600000\n * outageEvent.humanizeDuration()) // \"10 hours\"\n * ```\n *\n * And we can access the data like so:\n *\n * ```js\n * outageEvent.get(\"title\")  // \"STAR-CR5 - Outage\"\n * ```\n */\nclass TimeRangeEvent extends _event.default {\n  /**\n   * The creation of an TimeRangeEvent is done by combining two parts:\n   * the timerange and the data.\n   *\n   * To construct you specify a TimeRange, along with the data.\n   *\n   * To specify the data you can supply either:\n   *     - a Javascript object containing key values pairs\n   *     - an Immutable.Map, or\n   *     - a simple type such as an integer. In the case of the simple type\n   *       this is a shorthand for supplying {\"value\": v}.\n   */\n  constructor(arg1, arg2) {\n    super();\n\n    if (arg1 instanceof TimeRangeEvent) {\n      var other = arg1;\n      this._d = other._d;\n      return;\n    } else if (arg1 instanceof _immutable.default.Map) {\n      this._d = arg1;\n      return;\n    }\n\n    var range = _util.default.timeRangeFromArg(arg1);\n\n    var data = _util.default.dataFromArg(arg2);\n\n    this._d = new _immutable.default.Map({\n      range,\n      data\n    });\n  }\n  /**\n   * Returns the timerange as a string\n   */\n\n\n  key() {\n    return \"\".concat(+this.timerange().begin(), \",\").concat(+this.timerange().end());\n  }\n  /**\n   * Returns the TimeRangeEvent as a JSON object, converting all\n   * Immutable structures in the process.\n   */\n\n\n  toJSON() {\n    return {\n      timerange: this.timerange().toJSON(),\n      data: this.data().toJSON()\n    };\n  }\n  /**\n   * Returns a flat array starting with the timestamp, followed by the values.\n   */\n\n\n  toPoint(columns) {\n    var values = [];\n    columns.forEach(c => {\n      var v = this.data().get(c);\n      values.push(v === \"undefined\" ? null : v);\n    });\n    return [this.timerange().toJSON(), ...values];\n  }\n  /**\n   * The timerange of this data as a `TimeRange` object\n   * @return {TimeRange} TimeRange of this data.\n   */\n\n\n  timerange() {\n    return this._d.get(\"range\");\n  }\n  /**\n   * The TimeRange of this event, in UTC, as a string.\n   * @return {string} TimeRange of this data.\n   */\n\n\n  timerangeAsUTCString() {\n    return this.timerange().toUTCString();\n  }\n  /**\n   * The TimeRange of this event, in Local time, as a string.\n   * @return {string} TimeRange of this data.\n   */\n\n\n  timerangeAsLocalString() {\n    return this.timerange().toLocalString();\n  }\n  /**\n   * The begin time of this Event\n   * @return {Data} Begin time\n   */\n\n\n  begin() {\n    return this.timerange().begin();\n  }\n  /**\n   * The end time of this Event\n   * @return {Data} End time\n   */\n\n\n  end() {\n    return this.timerange().end();\n  }\n  /**\n   * Alias for the begin() time.\n   * @return {Data} Time representing this Event\n   */\n\n\n  timestamp() {\n    return this.begin();\n  }\n  /**\n   * A human friendly version of the duration of this event\n   */\n\n\n  humanizeDuration() {\n    return this.timerange().humanizeDuration();\n  }\n\n}\n\nvar _default = TimeRangeEvent;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}