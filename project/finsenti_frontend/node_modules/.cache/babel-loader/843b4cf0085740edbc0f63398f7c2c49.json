{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _immutable = _interopRequireDefault(require(\"immutable\"));\n\nvar _event = _interopRequireDefault(require(\"./event\"));\n\nvar _util = _interopRequireDefault(require(\"./base/util\"));\n/*\n *  Copyright (c) 2016-2017, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/**\n * An `IndexedEvent` uses an `Index` to specify a timerange over which the event\n * occurs and maps that to a data object representing some measurement or metric\n * during that time range.\n *\n * You can supply the index as a string or as an Index object.\n *\n * Example Indexes are:\n *  * 1d-1565 is the entire duration of the 1565th day since the UNIX epoch\n *  * 2014-03 is the entire duration of march in 2014\n *\n * The range, as expressed by the `Index`, is provided by the convenience method\n * `range()`, which returns a `TimeRange` instance. Alternatively the begin\n * and end times represented by the Index can be found with `begin()`\n * and `end()` respectively.\n *\n * The data is also specified during construction, and is generally expected to\n * be an object or an Immutable Map. If an object is provided it will be stored\n * internally as an Immutable Map. If the data provided is some other type then\n * it will be equivalent to supplying an object of `{value: data}`. Data may be\n * undefined.\n *\n * The get the data out of an IndexedEvent instance use `data()`. It will return\n * an Immutable.Map.\n */\n\n\nclass IndexedEvent extends _event.default {\n  /**\n   * The creation of an IndexedEvent is done by combining two parts:\n   * the Index and the data.\n   *\n   * To construct you specify an Index, along with the data.\n   *\n   * The index may be an Index, or a string.\n   *\n   * To specify the data you can supply either:\n   *     - a Javascript object containing key values pairs\n   *     - an Immutable.Map, or\n   *     - a simple type such as an integer. In the case of the simple type\n   *       this is a shorthand for supplying {\"value\": v}.\n   */\n  constructor(arg1, arg2, arg3) {\n    super();\n\n    if (arg1 instanceof IndexedEvent) {\n      var other = arg1;\n      this._d = other._d;\n      return;\n    } else if (arg1 instanceof _immutable.default.Map) {\n      this._d = arg1;\n      return;\n    }\n\n    var index = _util.default.indexFromArgs(arg1, arg3);\n\n    var data = _util.default.dataFromArg(arg2);\n\n    this._d = new _immutable.default.Map({\n      index,\n      data\n    });\n  }\n  /**\n   * Returns the timestamp (as ms since the epoch)\n   */\n\n\n  key() {\n    return this.indexAsString();\n  }\n  /**\n   * For Avro serialization, this defines the event's key (the Index)\n   * as a simple string\n   */\n\n\n  static keySchema() {\n    return {\n      name: \"index\",\n      type: \"string\"\n    };\n  }\n  /**\n   * Express the IndexedEvent as a JSON object\n   */\n\n\n  toJSON() {\n    return {\n      index: this.indexAsString(),\n      data: this.data().toJSON()\n    };\n  }\n  /**\n   * Returns a flat array starting with the index, followed by the values.\n   */\n\n\n  toPoint(columns) {\n    var values = [];\n    columns.forEach(c => {\n      var v = this.data().get(c);\n      values.push(v === \"undefined\" ? null : v);\n    });\n    return [this.indexAsString(), ...values];\n  }\n  /**\n   * Returns the Index associated with the data in this Event\n   * @return {Index} The Index\n   */\n\n\n  index() {\n    return this._d.get(\"index\");\n  }\n  /**\n   * Returns the Index as a string, same as event.index().toString()\n   * @return {string} The Index\n   */\n\n\n  indexAsString() {\n    return this.index().asString();\n  }\n  /**\n   * The TimeRange of this data, in UTC, as a string.\n   * @return {string} TimeRange of this data.\n   */\n\n\n  timerangeAsUTCString() {\n    return this.timerange().toUTCString();\n  }\n  /**\n   * The TimeRange of this data, in Local time, as a string.\n   * @return {string} TimeRange of this data.\n   */\n\n\n  timerangeAsLocalString() {\n    return this.timerange().toLocalString();\n  }\n  /**\n   * The TimeRange of this data\n   * @return {TimeRange} TimeRange of this data.\n   */\n\n\n  timerange() {\n    return this.index().asTimerange();\n  }\n  /**\n   * The begin time of this Event\n   * @return {Data} Begin time\n   */\n\n\n  begin() {\n    return this.timerange().begin();\n  }\n  /**\n   * The end time of this Event\n   * @return {Data} End time\n   */\n\n\n  end() {\n    return this.timerange().end();\n  }\n  /**\n   * Alias for the begin() time.\n   * @return {Data} Time representing this Event\n   */\n\n\n  timestamp() {\n    return this.begin();\n  }\n\n}\n\nvar _default = IndexedEvent;\nexports.default = _default;","map":{"version":3,"sources":["/Users/nicholasraffone/Documents/swefall2021/finalproj/FinancialSentiment/fin_sentiment_front/node_modules/pondjs/lib/lib/indexedevent.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_underscore","_immutable","_event","_util","IndexedEvent","constructor","arg1","arg2","arg3","other","_d","Map","index","indexFromArgs","data","dataFromArg","key","indexAsString","keySchema","name","type","toJSON","toPoint","columns","values","forEach","c","v","get","push","asString","timerangeAsUTCString","timerange","toUTCString","timerangeAsLocalString","toLocalString","asTimerange","begin","end","timestamp","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _immutable = _interopRequireDefault(require(\"immutable\"));\n\nvar _event = _interopRequireDefault(require(\"./event\"));\n\nvar _util = _interopRequireDefault(require(\"./base/util\"));\n\n/*\n *  Copyright (c) 2016-2017, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/**\n * An `IndexedEvent` uses an `Index` to specify a timerange over which the event\n * occurs and maps that to a data object representing some measurement or metric\n * during that time range.\n *\n * You can supply the index as a string or as an Index object.\n *\n * Example Indexes are:\n *  * 1d-1565 is the entire duration of the 1565th day since the UNIX epoch\n *  * 2014-03 is the entire duration of march in 2014\n *\n * The range, as expressed by the `Index`, is provided by the convenience method\n * `range()`, which returns a `TimeRange` instance. Alternatively the begin\n * and end times represented by the Index can be found with `begin()`\n * and `end()` respectively.\n *\n * The data is also specified during construction, and is generally expected to\n * be an object or an Immutable Map. If an object is provided it will be stored\n * internally as an Immutable Map. If the data provided is some other type then\n * it will be equivalent to supplying an object of `{value: data}`. Data may be\n * undefined.\n *\n * The get the data out of an IndexedEvent instance use `data()`. It will return\n * an Immutable.Map.\n */\nclass IndexedEvent extends _event.default {\n  /**\n   * The creation of an IndexedEvent is done by combining two parts:\n   * the Index and the data.\n   *\n   * To construct you specify an Index, along with the data.\n   *\n   * The index may be an Index, or a string.\n   *\n   * To specify the data you can supply either:\n   *     - a Javascript object containing key values pairs\n   *     - an Immutable.Map, or\n   *     - a simple type such as an integer. In the case of the simple type\n   *       this is a shorthand for supplying {\"value\": v}.\n   */\n  constructor(arg1, arg2, arg3) {\n    super();\n\n    if (arg1 instanceof IndexedEvent) {\n      var other = arg1;\n      this._d = other._d;\n      return;\n    } else if (arg1 instanceof _immutable.default.Map) {\n      this._d = arg1;\n      return;\n    }\n\n    var index = _util.default.indexFromArgs(arg1, arg3);\n\n    var data = _util.default.dataFromArg(arg2);\n\n    this._d = new _immutable.default.Map({\n      index,\n      data\n    });\n  }\n  /**\n   * Returns the timestamp (as ms since the epoch)\n   */\n\n\n  key() {\n    return this.indexAsString();\n  }\n  /**\n   * For Avro serialization, this defines the event's key (the Index)\n   * as a simple string\n   */\n\n\n  static keySchema() {\n    return {\n      name: \"index\",\n      type: \"string\"\n    };\n  }\n  /**\n   * Express the IndexedEvent as a JSON object\n   */\n\n\n  toJSON() {\n    return {\n      index: this.indexAsString(),\n      data: this.data().toJSON()\n    };\n  }\n  /**\n   * Returns a flat array starting with the index, followed by the values.\n   */\n\n\n  toPoint(columns) {\n    var values = [];\n    columns.forEach(c => {\n      var v = this.data().get(c);\n      values.push(v === \"undefined\" ? null : v);\n    });\n    return [this.indexAsString(), ...values];\n  }\n  /**\n   * Returns the Index associated with the data in this Event\n   * @return {Index} The Index\n   */\n\n\n  index() {\n    return this._d.get(\"index\");\n  }\n  /**\n   * Returns the Index as a string, same as event.index().toString()\n   * @return {string} The Index\n   */\n\n\n  indexAsString() {\n    return this.index().asString();\n  }\n  /**\n   * The TimeRange of this data, in UTC, as a string.\n   * @return {string} TimeRange of this data.\n   */\n\n\n  timerangeAsUTCString() {\n    return this.timerange().toUTCString();\n  }\n  /**\n   * The TimeRange of this data, in Local time, as a string.\n   * @return {string} TimeRange of this data.\n   */\n\n\n  timerangeAsLocalString() {\n    return this.timerange().toLocalString();\n  }\n  /**\n   * The TimeRange of this data\n   * @return {TimeRange} TimeRange of this data.\n   */\n\n\n  timerange() {\n    return this.index().asTimerange();\n  }\n  /**\n   * The begin time of this Event\n   * @return {Data} Begin time\n   */\n\n\n  begin() {\n    return this.timerange().begin();\n  }\n  /**\n   * The end time of this Event\n   * @return {Data} End time\n   */\n\n\n  end() {\n    return this.timerange().end();\n  }\n  /**\n   * Alias for the begin() time.\n   * @return {Data} Time representing this Event\n   */\n\n\n  timestamp() {\n    return this.begin();\n  }\n\n}\n\nvar _default = IndexedEvent;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}