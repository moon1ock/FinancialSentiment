{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _immutable = _interopRequireDefault(require(\"immutable\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n/*\n *  Copyright (c) 2015-2017, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/**\nA time range is a simple representation of a begin and end time, used\nto maintain consistency across an application.\n\n### Construction\n\nYou can define a TimeRange with moments, Javascript Date objects\nor ms since UNIX epoch. Here we construct one with two moments:\n\n```js\nvar fmt = \"YYYY-MM-DD HH:mm\";\nvar beginTime = moment(\"2012-01-11 11:11\", fmt);\nvar endTime =   moment(\"2012-02-22 12:12\", fmt);\nvar range = new TimeRange(beginTime, endTime);\n```\n\nor with ms times:\n\n```js\nvar range = new TimeRange([1326309060000, 1329941520000]);\n```\n\n */\n\n\nclass TimeRange {\n  /**\n   * Builds a new TimeRange which may be of several different formats:\n   *   - Another TimeRange (copy constructor)\n   *   - An Immutable.List containing two Dates.\n   *   - A Javascript array containing two Date or ms timestamps\n   *   - Two arguments, begin and end, each of which may be a Data,\n   *     a Moment, or a ms timestamp.\n   */\n  constructor(arg1, arg2) {\n    if (arg1 instanceof TimeRange) {\n      var other = arg1;\n      this._range = other._range;\n    } else if (arg1 instanceof _immutable.default.List) {\n      var rangeList = arg1;\n      this._range = rangeList;\n    } else if (_underscore.default.isArray(arg1)) {\n      var rangeArray = arg1;\n      this._range = new _immutable.default.List([new Date(rangeArray[0]), new Date(rangeArray[1])]);\n    } else {\n      var b = arg1;\n      var e = arg2;\n\n      if (_underscore.default.isDate(b) && _underscore.default.isDate(e)) {\n        this._range = new _immutable.default.List([new Date(b.getTime()), new Date(e.getTime())]);\n      } else if (_moment.default.isMoment(b) && _moment.default.isMoment(e)) {\n        this._range = new _immutable.default.List([new Date(b.valueOf()), new Date(e.valueOf())]);\n      } else if (_underscore.default.isNumber(b) && _underscore.default.isNumber(e)) {\n        this._range = new _immutable.default.List([new Date(b), new Date(e)]);\n      }\n    }\n  }\n  /**\n   * Returns the internal range, which is an Immutable List containing\n   * begin and end times.\n   *\n   * @return {Immutable.List} List containing the begin and end of the time range.\n   */\n\n\n  range() {\n    return this._range;\n  } //\n  // Serialize\n  //\n\n  /**\n   * Returns the TimeRange as JSON, which will be a Javascript array\n   * of two ms timestamps.\n   *\n   * @return {number[]} JSON representation of the TimeRange\n   */\n\n\n  toJSON() {\n    return [this.begin().getTime(), this.end().getTime()];\n  }\n  /**\n   * Returns the TimeRange as a string, useful for serialization.\n   *\n   * @return {string} String representation of the TimeRange\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * Returns the TimeRange as a string expressed in local time\n   *\n   * @return {string} String representation of the TimeRange\n   */\n\n\n  toLocalString() {\n    return \"[\".concat(this.begin(), \", \").concat(this.end(), \"]\");\n  }\n  /**\n   * Returns the TimeRange as a string expressed in UTC time\n   *\n   * @return {string} String representation of the TimeRange\n   */\n\n\n  toUTCString() {\n    return \"[\".concat(this.begin().toUTCString(), \", \").concat(this.end().toUTCString(), \"]\");\n  }\n  /**\n   * Returns a human friendly version of the TimeRange, e.g.\n   * \"Aug 1, 2014 05:19:59 am to Aug 1, 2014 07:41:06 am\"\n   *\n   * @return {string} Human friendly string representation of the TimeRange\n   */\n\n\n  humanize() {\n    var begin = (0, _moment.default)(this.begin());\n    var end = (0, _moment.default)(this.end());\n    var beginStr = begin.format(\"MMM D, YYYY hh:mm:ss a\");\n    var endStr = end.format(\"MMM D, YYYY hh:mm:ss a\");\n    return \"\".concat(beginStr, \" to \").concat(endStr);\n  }\n  /**\n   * Returns a human friendly version of the TimeRange\n   * @example\n   * \"a few seconds ago to a month ago\"\n   *\n   * @return {string} Human friendly string representation of the TimeRange\n   */\n\n\n  relativeString() {\n    var begin = (0, _moment.default)(this.begin());\n    var end = (0, _moment.default)(this.end());\n    return \"\".concat(begin.fromNow(), \" to \").concat(end.fromNow());\n  }\n  /**\n   * Returns the begin time of the TimeRange.\n   *\n   * @return {Date} The begin time of the TimeRange\n   */\n\n\n  begin() {\n    return this._range.get(0);\n  }\n  /**\n   * Returns the end time of the TimeRange.\n   *\n   * @return {Date} The end time of the TimeRange\n   */\n\n\n  end() {\n    return this._range.get(1);\n  }\n  /**\n   * Sets a new begin time on the TimeRange. The result will be\n   * a new TimeRange.\n   *\n   * @param {Date} t Time to set the begin time to\n   * @return {TimeRange} The new mutated TimeRange\n   */\n\n\n  setBegin(t) {\n    return new TimeRange(this._range.set(0, t));\n  }\n  /**\n   * Sets a new end time on the TimeRange. The result will be\n   * a new TimeRange.\n   *\n   * @param {Date} t Time to set the end time to\n   * @return {TimeRange} The new mutated TimeRange\n   */\n\n\n  setEnd(t) {\n    return new TimeRange(this._range.set(1, t));\n  }\n  /**\n   * Returns if the two TimeRanges can be considered equal,\n   * in that they have the same times.\n   *\n   * @param {TimeRange} other The TimeRange to compare to\n   * @return {boolean} Result\n   */\n\n\n  equals(other) {\n    return this.begin().getTime() === other.begin().getTime() && this.end().getTime() === other.end().getTime();\n  }\n  /**\n   * Returns true if other is completely inside this.\n   *\n   * @param {TimeRange} other The TimeRange to compare to\n   * @return {boolean} Result\n   */\n\n\n  contains(other) {\n    if (_underscore.default.isDate(other)) {\n      return this.begin() <= other && this.end() >= other;\n    } else {\n      return this.begin() <= other.begin() && this.end() >= other.end();\n    }\n\n    return false;\n  }\n  /**\n   * Returns true if this TimeRange is completely within the supplied\n   * other TimeRange.\n   *\n   * @param {TimeRange} other The TimeRange to compare to\n   * @return {boolean} Result\n   */\n\n\n  within(other) {\n    return this.begin() >= other.begin() && this.end() <= other.end();\n  }\n  /**\n   * Returns true if the passed in other TimeRange overlaps this time Range.\n   *\n   * @param {TimeRange} other The TimeRange to compare to\n   * @return {boolean} Result\n   */\n\n\n  overlaps(other) {\n    if (this.contains(other.begin()) && !this.contains(other.end()) || this.contains(other.end()) && !this.contains(other.begin())) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Returns true if the passed in other Range in no way\n   * overlaps this time Range.\n   *\n   * @param {TimeRange} other The TimeRange to compare to\n   * @return {boolean} Result\n   */\n\n\n  disjoint(other) {\n    return this.end() < other.begin() || this.begin() > other.end();\n  }\n  /**\n   * @param {TimeRange} other The TimeRange to extend with\n   * @return {TimeRange} a new Timerange which covers the extents of this and\n   * other combined.\n   */\n\n\n  extents(other) {\n    var b = this.begin() < other.begin() ? this.begin() : other.begin();\n    var e = this.end() > other.end() ? this.end() : other.end();\n    return new TimeRange(new Date(b.getTime()), new Date(e.getTime()));\n  }\n  /**\n   * @param {TimeRange} other The TimeRange to intersect with\n   * @return {TimeRange} A new TimeRange which represents the intersection\n   * (overlapping) part of this and other.\n   */\n\n\n  intersection(other) {\n    if (this.disjoint(other)) {\n      return undefined;\n    }\n\n    var b = this.begin() > other.begin() ? this.begin() : other.begin();\n    var e = this.end() < other.end() ? this.end() : other.end();\n    return new TimeRange(new Date(b.getTime()), new Date(e.getTime()));\n  }\n  /**\n   * @return {number} The duration of the TimeRange in milliseconds\n   */\n\n\n  duration() {\n    return this.end().getTime() - this.begin().getTime();\n  }\n  /**\n   * @return {string} A user friendly version of the duration.\n   */\n\n\n  humanizeDuration() {\n    return _moment.default.duration(this.duration()).humanize();\n  } //\n  // Static TimeRange creators\n  //\n\n  /**\n   * @return {TimeRange} The last day, as a TimeRange\n   */\n\n\n  static lastDay() {\n    var endTime = (0, _moment.default)();\n    var beginTime = endTime.clone().subtract(24, \"hours\");\n    return new TimeRange(beginTime, endTime);\n  }\n  /**\n   * @return {TimeRange} The last seven days, as a TimeRange\n   */\n\n\n  static lastSevenDays() {\n    var endTime = (0, _moment.default)();\n    var beginTime = endTime.clone().subtract(7, \"days\");\n    return new TimeRange(beginTime, endTime);\n  }\n  /**\n   * @return {TimeRange} The last thirty days, as a TimeRange\n   */\n\n\n  static lastThirtyDays() {\n    var endTime = (0, _moment.default)();\n    var beginTime = endTime.clone().subtract(30, \"days\");\n    return new TimeRange(beginTime, endTime);\n  }\n  /**\n   * @return {TimeRange} The last month, as a TimeRange\n   */\n\n\n  static lastMonth() {\n    var endTime = (0, _moment.default)();\n    var beginTime = endTime.clone().subtract(1, \"month\");\n    return new TimeRange(beginTime, endTime);\n  }\n  /**\n   * @return {TimeRange} The last 90 days, as a TimeRange\n   */\n\n\n  static lastNinetyDays() {\n    var endTime = (0, _moment.default)();\n    var beginTime = endTime.clone().subtract(90, \"days\");\n    return new TimeRange(beginTime, endTime);\n  }\n  /**\n   * @return {TimeRange} The last year, as a TimeRange\n   */\n\n\n  static lastYear() {\n    var endTime = (0, _moment.default)();\n    var beginTime = endTime.clone().subtract(1, \"year\");\n    return new TimeRange(beginTime, endTime);\n  }\n\n}\n\nvar _default = TimeRange;\nexports.default = _default;","map":{"version":3,"sources":["/Users/nicholasraffone/Documents/swefall2021/finalproj/FinancialSentiment/fin_sentiment_front/node_modules/pondjs/lib/lib/timerange.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_underscore","_immutable","_moment","TimeRange","constructor","arg1","arg2","other","_range","List","rangeList","isArray","rangeArray","Date","b","e","isDate","getTime","isMoment","valueOf","isNumber","range","toJSON","begin","end","toString","JSON","stringify","toLocalString","concat","toUTCString","humanize","beginStr","format","endStr","relativeString","fromNow","get","setBegin","t","set","setEnd","equals","contains","within","overlaps","disjoint","extents","intersection","undefined","duration","humanizeDuration","lastDay","endTime","beginTime","clone","subtract","lastSevenDays","lastThirtyDays","lastMonth","lastNinetyDays","lastYear","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _immutable = _interopRequireDefault(require(\"immutable\"));\n\nvar _moment = _interopRequireDefault(require(\"moment\"));\n\n/*\n *  Copyright (c) 2015-2017, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/**\nA time range is a simple representation of a begin and end time, used\nto maintain consistency across an application.\n\n### Construction\n\nYou can define a TimeRange with moments, Javascript Date objects\nor ms since UNIX epoch. Here we construct one with two moments:\n\n```js\nvar fmt = \"YYYY-MM-DD HH:mm\";\nvar beginTime = moment(\"2012-01-11 11:11\", fmt);\nvar endTime =   moment(\"2012-02-22 12:12\", fmt);\nvar range = new TimeRange(beginTime, endTime);\n```\n\nor with ms times:\n\n```js\nvar range = new TimeRange([1326309060000, 1329941520000]);\n```\n\n */\nclass TimeRange {\n  /**\n   * Builds a new TimeRange which may be of several different formats:\n   *   - Another TimeRange (copy constructor)\n   *   - An Immutable.List containing two Dates.\n   *   - A Javascript array containing two Date or ms timestamps\n   *   - Two arguments, begin and end, each of which may be a Data,\n   *     a Moment, or a ms timestamp.\n   */\n  constructor(arg1, arg2) {\n    if (arg1 instanceof TimeRange) {\n      var other = arg1;\n      this._range = other._range;\n    } else if (arg1 instanceof _immutable.default.List) {\n      var rangeList = arg1;\n      this._range = rangeList;\n    } else if (_underscore.default.isArray(arg1)) {\n      var rangeArray = arg1;\n      this._range = new _immutable.default.List([new Date(rangeArray[0]), new Date(rangeArray[1])]);\n    } else {\n      var b = arg1;\n      var e = arg2;\n\n      if (_underscore.default.isDate(b) && _underscore.default.isDate(e)) {\n        this._range = new _immutable.default.List([new Date(b.getTime()), new Date(e.getTime())]);\n      } else if (_moment.default.isMoment(b) && _moment.default.isMoment(e)) {\n        this._range = new _immutable.default.List([new Date(b.valueOf()), new Date(e.valueOf())]);\n      } else if (_underscore.default.isNumber(b) && _underscore.default.isNumber(e)) {\n        this._range = new _immutable.default.List([new Date(b), new Date(e)]);\n      }\n    }\n  }\n  /**\n   * Returns the internal range, which is an Immutable List containing\n   * begin and end times.\n   *\n   * @return {Immutable.List} List containing the begin and end of the time range.\n   */\n\n\n  range() {\n    return this._range;\n  } //\n  // Serialize\n  //\n\n  /**\n   * Returns the TimeRange as JSON, which will be a Javascript array\n   * of two ms timestamps.\n   *\n   * @return {number[]} JSON representation of the TimeRange\n   */\n\n\n  toJSON() {\n    return [this.begin().getTime(), this.end().getTime()];\n  }\n  /**\n   * Returns the TimeRange as a string, useful for serialization.\n   *\n   * @return {string} String representation of the TimeRange\n   */\n\n\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n  /**\n   * Returns the TimeRange as a string expressed in local time\n   *\n   * @return {string} String representation of the TimeRange\n   */\n\n\n  toLocalString() {\n    return \"[\".concat(this.begin(), \", \").concat(this.end(), \"]\");\n  }\n  /**\n   * Returns the TimeRange as a string expressed in UTC time\n   *\n   * @return {string} String representation of the TimeRange\n   */\n\n\n  toUTCString() {\n    return \"[\".concat(this.begin().toUTCString(), \", \").concat(this.end().toUTCString(), \"]\");\n  }\n  /**\n   * Returns a human friendly version of the TimeRange, e.g.\n   * \"Aug 1, 2014 05:19:59 am to Aug 1, 2014 07:41:06 am\"\n   *\n   * @return {string} Human friendly string representation of the TimeRange\n   */\n\n\n  humanize() {\n    var begin = (0, _moment.default)(this.begin());\n    var end = (0, _moment.default)(this.end());\n    var beginStr = begin.format(\"MMM D, YYYY hh:mm:ss a\");\n    var endStr = end.format(\"MMM D, YYYY hh:mm:ss a\");\n    return \"\".concat(beginStr, \" to \").concat(endStr);\n  }\n  /**\n   * Returns a human friendly version of the TimeRange\n   * @example\n   * \"a few seconds ago to a month ago\"\n   *\n   * @return {string} Human friendly string representation of the TimeRange\n   */\n\n\n  relativeString() {\n    var begin = (0, _moment.default)(this.begin());\n    var end = (0, _moment.default)(this.end());\n    return \"\".concat(begin.fromNow(), \" to \").concat(end.fromNow());\n  }\n  /**\n   * Returns the begin time of the TimeRange.\n   *\n   * @return {Date} The begin time of the TimeRange\n   */\n\n\n  begin() {\n    return this._range.get(0);\n  }\n  /**\n   * Returns the end time of the TimeRange.\n   *\n   * @return {Date} The end time of the TimeRange\n   */\n\n\n  end() {\n    return this._range.get(1);\n  }\n  /**\n   * Sets a new begin time on the TimeRange. The result will be\n   * a new TimeRange.\n   *\n   * @param {Date} t Time to set the begin time to\n   * @return {TimeRange} The new mutated TimeRange\n   */\n\n\n  setBegin(t) {\n    return new TimeRange(this._range.set(0, t));\n  }\n  /**\n   * Sets a new end time on the TimeRange. The result will be\n   * a new TimeRange.\n   *\n   * @param {Date} t Time to set the end time to\n   * @return {TimeRange} The new mutated TimeRange\n   */\n\n\n  setEnd(t) {\n    return new TimeRange(this._range.set(1, t));\n  }\n  /**\n   * Returns if the two TimeRanges can be considered equal,\n   * in that they have the same times.\n   *\n   * @param {TimeRange} other The TimeRange to compare to\n   * @return {boolean} Result\n   */\n\n\n  equals(other) {\n    return this.begin().getTime() === other.begin().getTime() && this.end().getTime() === other.end().getTime();\n  }\n  /**\n   * Returns true if other is completely inside this.\n   *\n   * @param {TimeRange} other The TimeRange to compare to\n   * @return {boolean} Result\n   */\n\n\n  contains(other) {\n    if (_underscore.default.isDate(other)) {\n      return this.begin() <= other && this.end() >= other;\n    } else {\n      return this.begin() <= other.begin() && this.end() >= other.end();\n    }\n\n    return false;\n  }\n  /**\n   * Returns true if this TimeRange is completely within the supplied\n   * other TimeRange.\n   *\n   * @param {TimeRange} other The TimeRange to compare to\n   * @return {boolean} Result\n   */\n\n\n  within(other) {\n    return this.begin() >= other.begin() && this.end() <= other.end();\n  }\n  /**\n   * Returns true if the passed in other TimeRange overlaps this time Range.\n   *\n   * @param {TimeRange} other The TimeRange to compare to\n   * @return {boolean} Result\n   */\n\n\n  overlaps(other) {\n    if (this.contains(other.begin()) && !this.contains(other.end()) || this.contains(other.end()) && !this.contains(other.begin())) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Returns true if the passed in other Range in no way\n   * overlaps this time Range.\n   *\n   * @param {TimeRange} other The TimeRange to compare to\n   * @return {boolean} Result\n   */\n\n\n  disjoint(other) {\n    return this.end() < other.begin() || this.begin() > other.end();\n  }\n  /**\n   * @param {TimeRange} other The TimeRange to extend with\n   * @return {TimeRange} a new Timerange which covers the extents of this and\n   * other combined.\n   */\n\n\n  extents(other) {\n    var b = this.begin() < other.begin() ? this.begin() : other.begin();\n    var e = this.end() > other.end() ? this.end() : other.end();\n    return new TimeRange(new Date(b.getTime()), new Date(e.getTime()));\n  }\n  /**\n   * @param {TimeRange} other The TimeRange to intersect with\n   * @return {TimeRange} A new TimeRange which represents the intersection\n   * (overlapping) part of this and other.\n   */\n\n\n  intersection(other) {\n    if (this.disjoint(other)) {\n      return undefined;\n    }\n\n    var b = this.begin() > other.begin() ? this.begin() : other.begin();\n    var e = this.end() < other.end() ? this.end() : other.end();\n    return new TimeRange(new Date(b.getTime()), new Date(e.getTime()));\n  }\n  /**\n   * @return {number} The duration of the TimeRange in milliseconds\n   */\n\n\n  duration() {\n    return this.end().getTime() - this.begin().getTime();\n  }\n  /**\n   * @return {string} A user friendly version of the duration.\n   */\n\n\n  humanizeDuration() {\n    return _moment.default.duration(this.duration()).humanize();\n  } //\n  // Static TimeRange creators\n  //\n\n  /**\n   * @return {TimeRange} The last day, as a TimeRange\n   */\n\n\n  static lastDay() {\n    var endTime = (0, _moment.default)();\n    var beginTime = endTime.clone().subtract(24, \"hours\");\n    return new TimeRange(beginTime, endTime);\n  }\n  /**\n   * @return {TimeRange} The last seven days, as a TimeRange\n   */\n\n\n  static lastSevenDays() {\n    var endTime = (0, _moment.default)();\n    var beginTime = endTime.clone().subtract(7, \"days\");\n    return new TimeRange(beginTime, endTime);\n  }\n  /**\n   * @return {TimeRange} The last thirty days, as a TimeRange\n   */\n\n\n  static lastThirtyDays() {\n    var endTime = (0, _moment.default)();\n    var beginTime = endTime.clone().subtract(30, \"days\");\n    return new TimeRange(beginTime, endTime);\n  }\n  /**\n   * @return {TimeRange} The last month, as a TimeRange\n   */\n\n\n  static lastMonth() {\n    var endTime = (0, _moment.default)();\n    var beginTime = endTime.clone().subtract(1, \"month\");\n    return new TimeRange(beginTime, endTime);\n  }\n  /**\n   * @return {TimeRange} The last 90 days, as a TimeRange\n   */\n\n\n  static lastNinetyDays() {\n    var endTime = (0, _moment.default)();\n    var beginTime = endTime.clone().subtract(90, \"days\");\n    return new TimeRange(beginTime, endTime);\n  }\n  /**\n   * @return {TimeRange} The last year, as a TimeRange\n   */\n\n\n  static lastYear() {\n    var endTime = (0, _moment.default)();\n    var beginTime = endTime.clone().subtract(1, \"year\");\n    return new TimeRange(beginTime, endTime);\n  }\n\n}\n\nvar _default = TimeRange;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}