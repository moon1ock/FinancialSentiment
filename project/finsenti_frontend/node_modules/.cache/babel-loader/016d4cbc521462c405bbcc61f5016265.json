{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _collection = _interopRequireDefault(require(\"./collection\"));\n\nvar _index = _interopRequireDefault(require(\"./index\"));\n/*\n *  Copyright (c) 2016-2017, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/**\n * A Collector is used to accumulate events into multiple collections,\n * based on potentially many strategies. In this current implementation\n * a collection is partitioned based on the window that it falls in\n * and the group it is part of.\n *\n * Collections are emitted from this class to the supplied onTrigger\n * callback.\n */\n\n\nclass Collector {\n  constructor(options, onTrigger) {\n    var {\n      windowType,\n      windowDuration,\n      groupBy,\n      emitOn\n    } = options;\n    this._groupBy = groupBy;\n    this._emitOn = emitOn;\n    this._windowType = windowType;\n    this._windowDuration = windowDuration; // Callback for trigger\n\n    this._onTrigger = onTrigger; // Maintained collections\n\n    this._collections = {};\n  }\n\n  flushCollections() {\n    this.emitCollections(this._collections);\n  }\n\n  emitCollections(collections) {\n    if (this._onTrigger) {\n      _underscore.default.each(collections, c => {\n        var {\n          collection,\n          windowKey,\n          groupByKey\n        } = c;\n        this._onTrigger && this._onTrigger(collection, windowKey, groupByKey);\n      });\n    }\n  }\n\n  addEvent(event) {\n    var timestamp = event.timestamp(); //\n    // Window key\n    //\n\n    var windowType = this._windowType;\n    var windowKey;\n\n    if (windowType === \"fixed\") {\n      windowKey = _index.default.getIndexString(this._windowDuration, timestamp);\n    } else if (windowType === \"daily\") {\n      windowKey = _index.default.getDailyIndexString(timestamp);\n    } else if (windowType === \"monthly\") {\n      windowKey = _index.default.getMonthlyIndexString(timestamp);\n    } else if (windowType === \"yearly\") {\n      windowKey = _index.default.getYearlyIndexString(timestamp);\n    } else {\n      windowKey = windowType;\n    } //\n    // Groupby key\n    //\n\n\n    var groupByKey = this._groupBy(event); //\n    // Collection key\n    //\n\n\n    var collectionKey = groupByKey ? \"\".concat(windowKey, \"::\").concat(groupByKey) : windowKey;\n    var discard = false;\n\n    if (!_underscore.default.has(this._collections, collectionKey)) {\n      this._collections[collectionKey] = {\n        windowKey,\n        groupByKey,\n        collection: new _collection.default()\n      };\n      discard = true;\n    }\n\n    this._collections[collectionKey].collection = this._collections[collectionKey].collection.addEvent(event); //\n    // If fixed windows, collect together old collections that\n    // will be discarded\n    //\n\n    var discards = {};\n\n    if (discard && windowType === \"fixed\") {\n      _underscore.default.each(this._collections, (c, k) => {\n        if (windowKey !== c.windowKey) {\n          discards[k] = c;\n        }\n      });\n    } //\n    // Emit\n    //\n\n\n    var emitOn = this._emitOn;\n\n    if (emitOn === \"eachEvent\") {\n      this.emitCollections(this._collections);\n    } else if (emitOn === \"discard\") {\n      this.emitCollections(discards);\n\n      _underscore.default.each(Object.keys(discards), k => {\n        delete this._collections[k];\n      });\n    } else if (emitOn === \"flush\") {// pass\n    } else {\n      throw new Error(\"Unknown emit type supplied to Collector\");\n    }\n  }\n\n}\n\nexports.default = Collector;","map":{"version":3,"sources":["/Users/nicholasraffone/Documents/swefall2021/finalproj/FinancialSentiment/fin_sentiment_front/node_modules/pondjs/lib/lib/collector.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_underscore","_collection","_index","Collector","constructor","options","onTrigger","windowType","windowDuration","groupBy","emitOn","_groupBy","_emitOn","_windowType","_windowDuration","_onTrigger","_collections","flushCollections","emitCollections","collections","each","c","collection","windowKey","groupByKey","addEvent","event","timestamp","getIndexString","getDailyIndexString","getMonthlyIndexString","getYearlyIndexString","collectionKey","concat","discard","has","discards","k","keys","Error"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,WAAW,GAAGP,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAxC;;AAEA,IAAIO,WAAW,GAAGR,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIQ,MAAM,GAAGT,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMS,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,OAAD,EAAUC,SAAV,EAAqB;AAC9B,QAAI;AACFC,MAAAA,UADE;AAEFC,MAAAA,cAFE;AAGFC,MAAAA,OAHE;AAIFC,MAAAA;AAJE,QAKAL,OALJ;AAMA,SAAKM,QAAL,GAAgBF,OAAhB;AACA,SAAKG,OAAL,GAAeF,MAAf;AACA,SAAKG,WAAL,GAAmBN,UAAnB;AACA,SAAKO,eAAL,GAAuBN,cAAvB,CAV8B,CAUS;;AAEvC,SAAKO,UAAL,GAAkBT,SAAlB,CAZ8B,CAYD;;AAE7B,SAAKU,YAAL,GAAoB,EAApB;AACD;;AAEDC,EAAAA,gBAAgB,GAAG;AACjB,SAAKC,eAAL,CAAqB,KAAKF,YAA1B;AACD;;AAEDE,EAAAA,eAAe,CAACC,WAAD,EAAc;AAC3B,QAAI,KAAKJ,UAAT,EAAqB;AACnBf,MAAAA,WAAW,CAACD,OAAZ,CAAoBqB,IAApB,CAAyBD,WAAzB,EAAsCE,CAAC,IAAI;AACzC,YAAI;AACFC,UAAAA,UADE;AAEFC,UAAAA,SAFE;AAGFC,UAAAA;AAHE,YAIAH,CAJJ;AAKA,aAAKN,UAAL,IAAmB,KAAKA,UAAL,CAAgBO,UAAhB,EAA4BC,SAA5B,EAAuCC,UAAvC,CAAnB;AACD,OAPD;AAQD;AACF;;AAEDC,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,QAAIC,SAAS,GAAGD,KAAK,CAACC,SAAN,EAAhB,CADc,CACqB;AACnC;AACA;;AAEA,QAAIpB,UAAU,GAAG,KAAKM,WAAtB;AACA,QAAIU,SAAJ;;AAEA,QAAIhB,UAAU,KAAK,OAAnB,EAA4B;AAC1BgB,MAAAA,SAAS,GAAGrB,MAAM,CAACH,OAAP,CAAe6B,cAAf,CAA8B,KAAKd,eAAnC,EAAoDa,SAApD,CAAZ;AACD,KAFD,MAEO,IAAIpB,UAAU,KAAK,OAAnB,EAA4B;AACjCgB,MAAAA,SAAS,GAAGrB,MAAM,CAACH,OAAP,CAAe8B,mBAAf,CAAmCF,SAAnC,CAAZ;AACD,KAFM,MAEA,IAAIpB,UAAU,KAAK,SAAnB,EAA8B;AACnCgB,MAAAA,SAAS,GAAGrB,MAAM,CAACH,OAAP,CAAe+B,qBAAf,CAAqCH,SAArC,CAAZ;AACD,KAFM,MAEA,IAAIpB,UAAU,KAAK,QAAnB,EAA6B;AAClCgB,MAAAA,SAAS,GAAGrB,MAAM,CAACH,OAAP,CAAegC,oBAAf,CAAoCJ,SAApC,CAAZ;AACD,KAFM,MAEA;AACLJ,MAAAA,SAAS,GAAGhB,UAAZ;AACD,KAlBa,CAkBZ;AACF;AACA;;;AAGA,QAAIiB,UAAU,GAAG,KAAKb,QAAL,CAAce,KAAd,CAAjB,CAvBc,CAuByB;AACvC;AACA;;;AAGA,QAAIM,aAAa,GAAGR,UAAU,GAAG,GAAGS,MAAH,CAAUV,SAAV,EAAqB,IAArB,EAA2BU,MAA3B,CAAkCT,UAAlC,CAAH,GAAmDD,SAAjF;AACA,QAAIW,OAAO,GAAG,KAAd;;AAEA,QAAI,CAAClC,WAAW,CAACD,OAAZ,CAAoBoC,GAApB,CAAwB,KAAKnB,YAA7B,EAA2CgB,aAA3C,CAAL,EAAgE;AAC9D,WAAKhB,YAAL,CAAkBgB,aAAlB,IAAmC;AACjCT,QAAAA,SADiC;AAEjCC,QAAAA,UAFiC;AAGjCF,QAAAA,UAAU,EAAE,IAAIrB,WAAW,CAACF,OAAhB;AAHqB,OAAnC;AAKAmC,MAAAA,OAAO,GAAG,IAAV;AACD;;AAED,SAAKlB,YAAL,CAAkBgB,aAAlB,EAAiCV,UAAjC,GAA8C,KAAKN,YAAL,CAAkBgB,aAAlB,EAAiCV,UAAjC,CAA4CG,QAA5C,CAAqDC,KAArD,CAA9C,CAxCc,CAwC6F;AAC3G;AACA;AACA;;AAEA,QAAIU,QAAQ,GAAG,EAAf;;AAEA,QAAIF,OAAO,IAAI3B,UAAU,KAAK,OAA9B,EAAuC;AACrCP,MAAAA,WAAW,CAACD,OAAZ,CAAoBqB,IAApB,CAAyB,KAAKJ,YAA9B,EAA4C,CAACK,CAAD,EAAIgB,CAAJ,KAAU;AACpD,YAAId,SAAS,KAAKF,CAAC,CAACE,SAApB,EAA+B;AAC7Ba,UAAAA,QAAQ,CAACC,CAAD,CAAR,GAAchB,CAAd;AACD;AACF,OAJD;AAKD,KArDa,CAqDZ;AACF;AACA;;;AAGA,QAAIX,MAAM,GAAG,KAAKE,OAAlB;;AAEA,QAAIF,MAAM,KAAK,WAAf,EAA4B;AAC1B,WAAKQ,eAAL,CAAqB,KAAKF,YAA1B;AACD,KAFD,MAEO,IAAIN,MAAM,KAAK,SAAf,EAA0B;AAC/B,WAAKQ,eAAL,CAAqBkB,QAArB;;AAEApC,MAAAA,WAAW,CAACD,OAAZ,CAAoBqB,IAApB,CAAyBzB,MAAM,CAAC2C,IAAP,CAAYF,QAAZ,CAAzB,EAAgDC,CAAC,IAAI;AACnD,eAAO,KAAKrB,YAAL,CAAkBqB,CAAlB,CAAP;AACD,OAFD;AAGD,KANM,MAMA,IAAI3B,MAAM,KAAK,OAAf,EAAwB,CAAC;AAC/B,KADM,MACA;AACL,YAAM,IAAI6B,KAAJ,CAAU,yCAAV,CAAN;AACD;AACF;;AA3Ga;;AA+GhB1C,OAAO,CAACE,OAAR,GAAkBI,SAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _collection = _interopRequireDefault(require(\"./collection\"));\n\nvar _index = _interopRequireDefault(require(\"./index\"));\n\n/*\n *  Copyright (c) 2016-2017, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/**\n * A Collector is used to accumulate events into multiple collections,\n * based on potentially many strategies. In this current implementation\n * a collection is partitioned based on the window that it falls in\n * and the group it is part of.\n *\n * Collections are emitted from this class to the supplied onTrigger\n * callback.\n */\nclass Collector {\n  constructor(options, onTrigger) {\n    var {\n      windowType,\n      windowDuration,\n      groupBy,\n      emitOn\n    } = options;\n    this._groupBy = groupBy;\n    this._emitOn = emitOn;\n    this._windowType = windowType;\n    this._windowDuration = windowDuration; // Callback for trigger\n\n    this._onTrigger = onTrigger; // Maintained collections\n\n    this._collections = {};\n  }\n\n  flushCollections() {\n    this.emitCollections(this._collections);\n  }\n\n  emitCollections(collections) {\n    if (this._onTrigger) {\n      _underscore.default.each(collections, c => {\n        var {\n          collection,\n          windowKey,\n          groupByKey\n        } = c;\n        this._onTrigger && this._onTrigger(collection, windowKey, groupByKey);\n      });\n    }\n  }\n\n  addEvent(event) {\n    var timestamp = event.timestamp(); //\n    // Window key\n    //\n\n    var windowType = this._windowType;\n    var windowKey;\n\n    if (windowType === \"fixed\") {\n      windowKey = _index.default.getIndexString(this._windowDuration, timestamp);\n    } else if (windowType === \"daily\") {\n      windowKey = _index.default.getDailyIndexString(timestamp);\n    } else if (windowType === \"monthly\") {\n      windowKey = _index.default.getMonthlyIndexString(timestamp);\n    } else if (windowType === \"yearly\") {\n      windowKey = _index.default.getYearlyIndexString(timestamp);\n    } else {\n      windowKey = windowType;\n    } //\n    // Groupby key\n    //\n\n\n    var groupByKey = this._groupBy(event); //\n    // Collection key\n    //\n\n\n    var collectionKey = groupByKey ? \"\".concat(windowKey, \"::\").concat(groupByKey) : windowKey;\n    var discard = false;\n\n    if (!_underscore.default.has(this._collections, collectionKey)) {\n      this._collections[collectionKey] = {\n        windowKey,\n        groupByKey,\n        collection: new _collection.default()\n      };\n      discard = true;\n    }\n\n    this._collections[collectionKey].collection = this._collections[collectionKey].collection.addEvent(event); //\n    // If fixed windows, collect together old collections that\n    // will be discarded\n    //\n\n    var discards = {};\n\n    if (discard && windowType === \"fixed\") {\n      _underscore.default.each(this._collections, (c, k) => {\n        if (windowKey !== c.windowKey) {\n          discards[k] = c;\n        }\n      });\n    } //\n    // Emit\n    //\n\n\n    var emitOn = this._emitOn;\n\n    if (emitOn === \"eachEvent\") {\n      this.emitCollections(this._collections);\n    } else if (emitOn === \"discard\") {\n      this.emitCollections(discards);\n\n      _underscore.default.each(Object.keys(discards), k => {\n        delete this._collections[k];\n      });\n    } else if (emitOn === \"flush\") {// pass\n    } else {\n      throw new Error(\"Unknown emit type supplied to Collector\");\n    }\n  }\n\n}\n\nexports.default = Collector;"]},"metadata":{},"sourceType":"script"}