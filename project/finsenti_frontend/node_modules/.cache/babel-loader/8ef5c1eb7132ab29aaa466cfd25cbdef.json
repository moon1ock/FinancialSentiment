{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Renders a 'axis' that display a label for a current tracker value:\n * ```\n *      ----+----------------+\n *          |     56.2G      |\n *          |      bps       |\n *          |                |\n *      ----+----------------+\n * ```\n * This would be used when you have many rows of data and the user is required\n * to interact with the data to see actual values. You would use this at the\n * end of the row and supply it with the current value. See the cycling example\n * for how that would all work.\n */\n\n/**\n *  Copyright (c) 2015-present, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n\nvar ValueAxis = function ValueAxis(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      value = _ref.value,\n      detail = _ref.detail;\n  var labelStyle = {\n    fill: \"#666\",\n    fontSize: 20,\n    textAnchor: \"middle\"\n  };\n  var detailStyle = {\n    fontSize: 12,\n    textAnchor: \"middle\",\n    fill: \"#9a9a9a\"\n  };\n  return _react2.default.createElement(\"g\", null, _react2.default.createElement(\"rect\", {\n    key: \"background\",\n    x: \"0\",\n    y: \"0\",\n    width: width,\n    height: height,\n    style: {\n      fill: \"none\",\n      stroke: \"none\"\n    }\n  }), _react2.default.createElement(\"text\", {\n    key: \"value\",\n    x: parseInt(width / 2, 10),\n    y: height / 2,\n    style: labelStyle\n  }, value), _react2.default.createElement(\"text\", {\n    key: \"detail\",\n    x: parseInt(width / 2, 10),\n    y: height / 2,\n    dy: \"1.2em\",\n    style: detailStyle\n  }, detail));\n};\n\nValueAxis.propTypes = {\n  /**\n   * Show or hide this\n   */\n  visible: _propTypes2.default.bool,\n\n  /**\n   * If values are numbers, use this format string\n   */\n  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n\n  /**\n   * Use this to show what units are being used. It will appear below\n   * the value.\n   */\n  detail: _propTypes2.default.string,\n\n  /**\n   * The width of the axis\n   */\n  width: _propTypes2.default.number,\n\n  /**\n   * [Internal] The height of the axis\n   */\n  height: _propTypes2.default.number\n};\nValueAxis.defaultProps = {\n  visible: true\n};\nexports.default = ValueAxis;","map":{"version":3,"sources":["/Users/nicholasraffone/Documents/swefall2021/finalproj/FinancialSentiment/fin_sentiment_front/node_modules/react-timeseries-charts/lib/components/ValueAxis.js"],"names":["Object","defineProperty","exports","value","_react","require","_react2","_interopRequireDefault","_propTypes","_propTypes2","obj","__esModule","default","ValueAxis","_ref","width","height","detail","labelStyle","fill","fontSize","textAnchor","detailStyle","createElement","key","x","y","style","stroke","parseInt","dy","propTypes","visible","bool","oneOfType","string","number","defaultProps"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;;AAIA,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,OAAO,GAAGC,sBAAsB,CAACH,MAAD,CAApC;;AAEA,IAAII,UAAU,GAAGH,OAAO,CAAC,YAAD,CAAxB;;AAEA,IAAII,WAAW,GAAGF,sBAAsB,CAACC,UAAD,CAAxC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,IAAIG,SAAS,GAAG,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACrC,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AAAA,MACIC,MAAM,GAAGF,IAAI,CAACE,MADlB;AAAA,MAEIb,KAAK,GAAGW,IAAI,CAACX,KAFjB;AAAA,MAGIc,MAAM,GAAGH,IAAI,CAACG,MAHlB;AAKA,MAAIC,UAAU,GAAG;AACbC,IAAAA,IAAI,EAAE,MADO;AAEbC,IAAAA,QAAQ,EAAE,EAFG;AAGbC,IAAAA,UAAU,EAAE;AAHC,GAAjB;AAKA,MAAIC,WAAW,GAAG;AACdF,IAAAA,QAAQ,EAAE,EADI;AAEdC,IAAAA,UAAU,EAAE,QAFE;AAGdF,IAAAA,IAAI,EAAE;AAHQ,GAAlB;AAKA,SAAOb,OAAO,CAACM,OAAR,CAAgBW,aAAhB,CACH,GADG,EAEH,IAFG,EAGHjB,OAAO,CAACM,OAAR,CAAgBW,aAAhB,CAA8B,MAA9B,EAAsC;AAClCC,IAAAA,GAAG,EAAE,YAD6B;AAElCC,IAAAA,CAAC,EAAE,GAF+B;AAGlCC,IAAAA,CAAC,EAAE,GAH+B;AAIlCX,IAAAA,KAAK,EAAEA,KAJ2B;AAKlCC,IAAAA,MAAM,EAAEA,MAL0B;AAMlCW,IAAAA,KAAK,EAAE;AAAER,MAAAA,IAAI,EAAE,MAAR;AAAgBS,MAAAA,MAAM,EAAE;AAAxB;AAN2B,GAAtC,CAHG,EAWHtB,OAAO,CAACM,OAAR,CAAgBW,aAAhB,CACI,MADJ,EAEI;AAAEC,IAAAA,GAAG,EAAE,OAAP;AAAgBC,IAAAA,CAAC,EAAEI,QAAQ,CAACd,KAAK,GAAG,CAAT,EAAY,EAAZ,CAA3B;AAA4CW,IAAAA,CAAC,EAAEV,MAAM,GAAG,CAAxD;AAA2DW,IAAAA,KAAK,EAAET;AAAlE,GAFJ,EAGIf,KAHJ,CAXG,EAgBHG,OAAO,CAACM,OAAR,CAAgBW,aAAhB,CACI,MADJ,EAEI;AACIC,IAAAA,GAAG,EAAE,QADT;AAEIC,IAAAA,CAAC,EAAEI,QAAQ,CAACd,KAAK,GAAG,CAAT,EAAY,EAAZ,CAFf;AAGIW,IAAAA,CAAC,EAAEV,MAAM,GAAG,CAHhB;AAIIc,IAAAA,EAAE,EAAE,OAJR;AAKIH,IAAAA,KAAK,EAAEL;AALX,GAFJ,EASIL,MATJ,CAhBG,CAAP;AA4BH,CA5CD;;AA8CAJ,SAAS,CAACkB,SAAV,GAAsB;AAClB;AACJ;AACA;AACIC,EAAAA,OAAO,EAAEvB,WAAW,CAACG,OAAZ,CAAoBqB,IAJX;;AAMlB;AACJ;AACA;AACI9B,EAAAA,KAAK,EAAEM,WAAW,CAACG,OAAZ,CAAoBsB,SAApB,CAA8B,CAACzB,WAAW,CAACG,OAAZ,CAAoBuB,MAArB,EAA6B1B,WAAW,CAACG,OAAZ,CAAoBwB,MAAjD,CAA9B,CATW;;AAWlB;AACJ;AACA;AACA;AACInB,EAAAA,MAAM,EAAER,WAAW,CAACG,OAAZ,CAAoBuB,MAfV;;AAiBlB;AACJ;AACA;AACIpB,EAAAA,KAAK,EAAEN,WAAW,CAACG,OAAZ,CAAoBwB,MApBT;;AAsBlB;AACJ;AACA;AACIpB,EAAAA,MAAM,EAAEP,WAAW,CAACG,OAAZ,CAAoBwB;AAzBV,CAAtB;AA4BAvB,SAAS,CAACwB,YAAV,GAAyB;AACrBL,EAAAA,OAAO,EAAE;AADY,CAAzB;AAIA9B,OAAO,CAACU,OAAR,GAAkBC,SAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Renders a 'axis' that display a label for a current tracker value:\n * ```\n *      ----+----------------+\n *          |     56.2G      |\n *          |      bps       |\n *          |                |\n *      ----+----------------+\n * ```\n * This would be used when you have many rows of data and the user is required\n * to interact with the data to see actual values. You would use this at the\n * end of the row and supply it with the current value. See the cycling example\n * for how that would all work.\n */\n/**\n *  Copyright (c) 2015-present, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nvar ValueAxis = function ValueAxis(_ref) {\n    var width = _ref.width,\n        height = _ref.height,\n        value = _ref.value,\n        detail = _ref.detail;\n\n    var labelStyle = {\n        fill: \"#666\",\n        fontSize: 20,\n        textAnchor: \"middle\"\n    };\n    var detailStyle = {\n        fontSize: 12,\n        textAnchor: \"middle\",\n        fill: \"#9a9a9a\"\n    };\n    return _react2.default.createElement(\n        \"g\",\n        null,\n        _react2.default.createElement(\"rect\", {\n            key: \"background\",\n            x: \"0\",\n            y: \"0\",\n            width: width,\n            height: height,\n            style: { fill: \"none\", stroke: \"none\" }\n        }),\n        _react2.default.createElement(\n            \"text\",\n            { key: \"value\", x: parseInt(width / 2, 10), y: height / 2, style: labelStyle },\n            value\n        ),\n        _react2.default.createElement(\n            \"text\",\n            {\n                key: \"detail\",\n                x: parseInt(width / 2, 10),\n                y: height / 2,\n                dy: \"1.2em\",\n                style: detailStyle\n            },\n            detail\n        )\n    );\n};\n\nValueAxis.propTypes = {\n    /**\n     * Show or hide this\n     */\n    visible: _propTypes2.default.bool,\n\n    /**\n     * If values are numbers, use this format string\n     */\n    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n\n    /**\n     * Use this to show what units are being used. It will appear below\n     * the value.\n     */\n    detail: _propTypes2.default.string,\n\n    /**\n     * The width of the axis\n     */\n    width: _propTypes2.default.number,\n\n    /**\n     * [Internal] The height of the axis\n     */\n    height: _propTypes2.default.number\n};\n\nValueAxis.defaultProps = {\n    visible: true\n};\n\nexports.default = ValueAxis;"]},"metadata":{},"sourceType":"script"}