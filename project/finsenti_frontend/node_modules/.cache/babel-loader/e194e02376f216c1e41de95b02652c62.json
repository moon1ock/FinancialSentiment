{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _immutable = _interopRequireDefault(require(\"immutable\"));\n\nvar _processor = _interopRequireDefault(require(\"./processor\"));\n\nvar _indexedevent = _interopRequireDefault(require(\"../indexedevent\"));\n\nvar _timerangeevent = _interopRequireDefault(require(\"../timerangeevent\"));\n\nvar _pipeline = require(\"../pipeline\");\n\nvar _util = _interopRequireDefault(require(\"../base/util\"));\n/**\n *  Copyright (c) 2016-2017, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/*eslint no-console: 0 */\n\n/**\n * Simple processor generate the Rate of two Event objects and\n * emit them as a TimeRangeEvent. Can be used alone or chained\n * with the Align processor for snmp rates, etc.\n */\n\n\nclass Derivator extends _processor.default {\n  constructor(arg1, options) {\n    super(arg1, options);\n\n    if (arg1 instanceof Derivator) {\n      var other = arg1;\n      this._fieldSpec = other._fieldSpec;\n      this._allowNegative = other._allowNegative;\n    } else if ((0, _pipeline.isPipeline)(arg1)) {\n      var {\n        fieldSpec,\n        allowNegative\n      } = options;\n      this._fieldSpec = fieldSpec;\n      this._allowNegative = allowNegative;\n    } else {\n      throw new Error(\"Unknown arg to Derivator constructor\", arg1);\n    } //\n    // Internal members\n    //\n\n\n    this._previous = null; // work out field specs\n\n    if (_underscore.default.isString(this._fieldSpec)) {\n      this._fieldSpec = [this._fieldSpec];\n    } else if (!this._fieldSpec) {\n      this._fieldSpec = [\"value\"];\n    }\n  }\n\n  clone() {\n    return new Derivator(this);\n  }\n  /**\n   * Generate a new TimeRangeEvent containing the rate per second\n   * between two events.\n   */\n\n\n  getRate(event) {\n    var d = new _immutable.default.Map();\n\n    var previousTime = this._previous.timestamp().getTime();\n\n    var currentTime = event.timestamp().getTime();\n    var deltaTime = (currentTime - previousTime) / 1000;\n\n    this._fieldSpec.forEach(path => {\n      var fieldPath = _util.default.fieldPathToArray(path);\n\n      var ratePath = fieldPath.slice();\n      ratePath[ratePath.length - 1] += \"_rate\";\n\n      var previousVal = this._previous.get(fieldPath);\n\n      var currentVal = event.get(fieldPath);\n      var rate = null;\n\n      if (!_underscore.default.isNumber(previousVal) || !_underscore.default.isNumber(currentVal)) {\n        console.warn(\"Path \".concat(fieldPath, \" contains a non-numeric value or does not exist\"));\n      } else {\n        rate = (currentVal - previousVal) / deltaTime;\n      }\n\n      if (this._allowNegative === false && rate < 0) {\n        // don't allow negative differentials in certain cases\n        d = d.setIn(ratePath, null);\n      } else {\n        d = d.setIn(ratePath, rate);\n      }\n    });\n\n    return new _timerangeevent.default([previousTime, currentTime], d);\n  }\n  /**\n   * Perform the fill operation on the event and emit.\n   */\n\n\n  addEvent(event) {\n    if (event instanceof _timerangeevent.default || event instanceof _indexedevent.default) {\n      throw new Error(\"TimeRangeEvent and IndexedEvent series can not be aligned.\");\n    }\n\n    if (this.hasObservers()) {\n      if (!this._previous) {\n        this._previous = event;\n        return;\n      }\n\n      var outputEvent = this.getRate(event);\n      this.emit(outputEvent); // The current event now becomes the previous event\n\n      this._previous = event;\n    }\n  }\n\n}\n\nexports.default = Derivator;","map":{"version":3,"sources":["/Users/nicholasraffone/Documents/swefall2021/finalproj/FinancialSentiment/fin_sentiment_front/node_modules/pondjs/lib/lib/processors/derivator.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","default","_underscore","_immutable","_processor","_indexedevent","_timerangeevent","_pipeline","_util","Derivator","constructor","arg1","options","other","_fieldSpec","_allowNegative","isPipeline","fieldSpec","allowNegative","Error","_previous","isString","clone","getRate","event","d","Map","previousTime","timestamp","getTime","currentTime","deltaTime","forEach","path","fieldPath","fieldPathToArray","ratePath","slice","length","previousVal","get","currentVal","rate","isNumber","console","warn","concat","setIn","addEvent","hasObservers","outputEvent","emit"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,WAAW,GAAGP,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAxC;;AAEA,IAAIO,UAAU,GAAGR,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAvC;;AAEA,IAAIQ,UAAU,GAAGT,sBAAsB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAvC;;AAEA,IAAIS,aAAa,GAAGV,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAA1C;;AAEA,IAAIU,eAAe,GAAGX,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAA5C;;AAEA,IAAIW,SAAS,GAAGX,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIY,KAAK,GAAGb,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMa,SAAN,SAAwBL,UAAU,CAACH,OAAnC,CAA2C;AACzCS,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACzB,UAAMD,IAAN,EAAYC,OAAZ;;AAEA,QAAID,IAAI,YAAYF,SAApB,EAA+B;AAC7B,UAAII,KAAK,GAAGF,IAAZ;AACA,WAAKG,UAAL,GAAkBD,KAAK,CAACC,UAAxB;AACA,WAAKC,cAAL,GAAsBF,KAAK,CAACE,cAA5B;AACD,KAJD,MAIO,IAAI,CAAC,GAAGR,SAAS,CAACS,UAAd,EAA0BL,IAA1B,CAAJ,EAAqC;AAC1C,UAAI;AACFM,QAAAA,SADE;AAEFC,QAAAA;AAFE,UAGAN,OAHJ;AAIA,WAAKE,UAAL,GAAkBG,SAAlB;AACA,WAAKF,cAAL,GAAsBG,aAAtB;AACD,KAPM,MAOA;AACL,YAAM,IAAIC,KAAJ,CAAU,sCAAV,EAAkDR,IAAlD,CAAN;AACD,KAhBwB,CAgBvB;AACF;AACA;;;AAGA,SAAKS,SAAL,GAAiB,IAAjB,CArByB,CAqBF;;AAEvB,QAAIlB,WAAW,CAACD,OAAZ,CAAoBoB,QAApB,CAA6B,KAAKP,UAAlC,CAAJ,EAAmD;AACjD,WAAKA,UAAL,GAAkB,CAAC,KAAKA,UAAN,CAAlB;AACD,KAFD,MAEO,IAAI,CAAC,KAAKA,UAAV,EAAsB;AAC3B,WAAKA,UAAL,GAAkB,CAAC,OAAD,CAAlB;AACD;AACF;;AAEDQ,EAAAA,KAAK,GAAG;AACN,WAAO,IAAIb,SAAJ,CAAc,IAAd,CAAP;AACD;AACD;AACF;AACA;AACA;;;AAGEc,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,QAAIC,CAAC,GAAG,IAAItB,UAAU,CAACF,OAAX,CAAmByB,GAAvB,EAAR;;AAEA,QAAIC,YAAY,GAAG,KAAKP,SAAL,CAAeQ,SAAf,GAA2BC,OAA3B,EAAnB;;AAEA,QAAIC,WAAW,GAAGN,KAAK,CAACI,SAAN,GAAkBC,OAAlB,EAAlB;AACA,QAAIE,SAAS,GAAG,CAACD,WAAW,GAAGH,YAAf,IAA+B,IAA/C;;AAEA,SAAKb,UAAL,CAAgBkB,OAAhB,CAAwBC,IAAI,IAAI;AAC9B,UAAIC,SAAS,GAAG1B,KAAK,CAACP,OAAN,CAAckC,gBAAd,CAA+BF,IAA/B,CAAhB;;AAEA,UAAIG,QAAQ,GAAGF,SAAS,CAACG,KAAV,EAAf;AACAD,MAAAA,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAnB,CAAR,IAAiC,OAAjC;;AAEA,UAAIC,WAAW,GAAG,KAAKnB,SAAL,CAAeoB,GAAf,CAAmBN,SAAnB,CAAlB;;AAEA,UAAIO,UAAU,GAAGjB,KAAK,CAACgB,GAAN,CAAUN,SAAV,CAAjB;AACA,UAAIQ,IAAI,GAAG,IAAX;;AAEA,UAAI,CAACxC,WAAW,CAACD,OAAZ,CAAoB0C,QAApB,CAA6BJ,WAA7B,CAAD,IAA8C,CAACrC,WAAW,CAACD,OAAZ,CAAoB0C,QAApB,CAA6BF,UAA7B,CAAnD,EAA6F;AAC3FG,QAAAA,OAAO,CAACC,IAAR,CAAa,QAAQC,MAAR,CAAeZ,SAAf,EAA0B,iDAA1B,CAAb;AACD,OAFD,MAEO;AACLQ,QAAAA,IAAI,GAAG,CAACD,UAAU,GAAGF,WAAd,IAA6BR,SAApC;AACD;;AAED,UAAI,KAAKhB,cAAL,KAAwB,KAAxB,IAAiC2B,IAAI,GAAG,CAA5C,EAA+C;AAC7C;AACAjB,QAAAA,CAAC,GAAGA,CAAC,CAACsB,KAAF,CAAQX,QAAR,EAAkB,IAAlB,CAAJ;AACD,OAHD,MAGO;AACLX,QAAAA,CAAC,GAAGA,CAAC,CAACsB,KAAF,CAAQX,QAAR,EAAkBM,IAAlB,CAAJ;AACD;AACF,KAvBD;;AAyBA,WAAO,IAAIpC,eAAe,CAACL,OAApB,CAA4B,CAAC0B,YAAD,EAAeG,WAAf,CAA5B,EAAyDL,CAAzD,CAAP;AACD;AACD;AACF;AACA;;;AAGEuB,EAAAA,QAAQ,CAACxB,KAAD,EAAQ;AACd,QAAIA,KAAK,YAAYlB,eAAe,CAACL,OAAjC,IAA4CuB,KAAK,YAAYnB,aAAa,CAACJ,OAA/E,EAAwF;AACtF,YAAM,IAAIkB,KAAJ,CAAU,4DAAV,CAAN;AACD;;AAED,QAAI,KAAK8B,YAAL,EAAJ,EAAyB;AACvB,UAAI,CAAC,KAAK7B,SAAV,EAAqB;AACnB,aAAKA,SAAL,GAAiBI,KAAjB;AACA;AACD;;AAED,UAAI0B,WAAW,GAAG,KAAK3B,OAAL,CAAaC,KAAb,CAAlB;AACA,WAAK2B,IAAL,CAAUD,WAAV,EAPuB,CAOC;;AAExB,WAAK9B,SAAL,GAAiBI,KAAjB;AACD;AACF;;AAhGwC;;AAoG3CzB,OAAO,CAACE,OAAR,GAAkBQ,SAAlB","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _underscore = _interopRequireDefault(require(\"underscore\"));\n\nvar _immutable = _interopRequireDefault(require(\"immutable\"));\n\nvar _processor = _interopRequireDefault(require(\"./processor\"));\n\nvar _indexedevent = _interopRequireDefault(require(\"../indexedevent\"));\n\nvar _timerangeevent = _interopRequireDefault(require(\"../timerangeevent\"));\n\nvar _pipeline = require(\"../pipeline\");\n\nvar _util = _interopRequireDefault(require(\"../base/util\"));\n\n/**\n *  Copyright (c) 2016-2017, The Regents of the University of California,\n *  through Lawrence Berkeley National Laboratory (subject to receipt\n *  of any required approvals from the U.S. Dept. of Energy).\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/*eslint no-console: 0 */\n\n/**\n * Simple processor generate the Rate of two Event objects and\n * emit them as a TimeRangeEvent. Can be used alone or chained\n * with the Align processor for snmp rates, etc.\n */\nclass Derivator extends _processor.default {\n  constructor(arg1, options) {\n    super(arg1, options);\n\n    if (arg1 instanceof Derivator) {\n      var other = arg1;\n      this._fieldSpec = other._fieldSpec;\n      this._allowNegative = other._allowNegative;\n    } else if ((0, _pipeline.isPipeline)(arg1)) {\n      var {\n        fieldSpec,\n        allowNegative\n      } = options;\n      this._fieldSpec = fieldSpec;\n      this._allowNegative = allowNegative;\n    } else {\n      throw new Error(\"Unknown arg to Derivator constructor\", arg1);\n    } //\n    // Internal members\n    //\n\n\n    this._previous = null; // work out field specs\n\n    if (_underscore.default.isString(this._fieldSpec)) {\n      this._fieldSpec = [this._fieldSpec];\n    } else if (!this._fieldSpec) {\n      this._fieldSpec = [\"value\"];\n    }\n  }\n\n  clone() {\n    return new Derivator(this);\n  }\n  /**\n   * Generate a new TimeRangeEvent containing the rate per second\n   * between two events.\n   */\n\n\n  getRate(event) {\n    var d = new _immutable.default.Map();\n\n    var previousTime = this._previous.timestamp().getTime();\n\n    var currentTime = event.timestamp().getTime();\n    var deltaTime = (currentTime - previousTime) / 1000;\n\n    this._fieldSpec.forEach(path => {\n      var fieldPath = _util.default.fieldPathToArray(path);\n\n      var ratePath = fieldPath.slice();\n      ratePath[ratePath.length - 1] += \"_rate\";\n\n      var previousVal = this._previous.get(fieldPath);\n\n      var currentVal = event.get(fieldPath);\n      var rate = null;\n\n      if (!_underscore.default.isNumber(previousVal) || !_underscore.default.isNumber(currentVal)) {\n        console.warn(\"Path \".concat(fieldPath, \" contains a non-numeric value or does not exist\"));\n      } else {\n        rate = (currentVal - previousVal) / deltaTime;\n      }\n\n      if (this._allowNegative === false && rate < 0) {\n        // don't allow negative differentials in certain cases\n        d = d.setIn(ratePath, null);\n      } else {\n        d = d.setIn(ratePath, rate);\n      }\n    });\n\n    return new _timerangeevent.default([previousTime, currentTime], d);\n  }\n  /**\n   * Perform the fill operation on the event and emit.\n   */\n\n\n  addEvent(event) {\n    if (event instanceof _timerangeevent.default || event instanceof _indexedevent.default) {\n      throw new Error(\"TimeRangeEvent and IndexedEvent series can not be aligned.\");\n    }\n\n    if (this.hasObservers()) {\n      if (!this._previous) {\n        this._previous = event;\n        return;\n      }\n\n      var outputEvent = this.getRate(event);\n      this.emit(outputEvent); // The current event now becomes the previous event\n\n      this._previous = event;\n    }\n  }\n\n}\n\nexports.default = Derivator;"]},"metadata":{},"sourceType":"script"}